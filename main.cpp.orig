#include "mbed.h"
#include "MBed_Adafruit_GPS.h"
#include "BNO055.h" //IMU
#include "rtos.h"

DigitalOut led1(LED1);
DigitalOut led2(LED2);

//RC controller is I2c -may change if RC controller has a library
I2C RC(p13, p14);
const int addr = 0x90; //make address for data?
char command[2]; // create an array to save data from i2c

// initialize variables for stepper motor rudder functions
float r_ang; //desired angle - user imput or nav software's specified angle
DigitalOut   r_motor( p25 ); // motor for rudder
DigitalOut   r_dir( p24 ); // specifies which direction stepper turns
DigitalOut    r_I(p26); //makes motor driver limit current to 1.5A, set to 0 and leave it
float p1; //p1-3 save the encoder position for an average
float p2; // to reduce noise
float p3;
float pos; //another variable for position
AnalogIn   r_ain(p18); //ain is raw encoder data

// initialize variables for stepper mast
float m_ang; //desired angle - user imput or nav software's specified angle
DigitalOut   m_motor( p22 ); // motor for rudder
DigitalOut   m_dir( p21 ); // specifies which direction stepper turns
DigitalOut    m_I(p23); //makes motor driver limit current to 1.5A, set to 0 and leave it
float m1; //m1-3 save the encoder position for an average
float m2; // to reduce noise
float m3;
float m_pos; //another variable for position
AnalogIn   m_ain(p20); //ain is raw encoder data

//GPS and IMU variables
Serial * gps_Serial;
Serial pc (USBTX, USBRX); // remnant of old
BNO055 bno(p28, p27);
Timer refresh_Timer; //sets up a timer for use in loop
char c; //when read via Adafruit_GPS::read(), the class returns string stored here
const int refresh_Time = 2000; //refresh time in ms
float pitch; //a multiuse variable used for sending things over GPS

union Float {       //slightly mysterious data type that we use to send data over serial
    float    m_float;
    uint8_t  m_bytes[sizeof(float)];
};
float        data;
uint8_t      bytes[sizeof(float)];
Float        myFloat;

//****make second thread*****
  Thread thread; //not working for some reason?

// ******rudder stepper functions******
void r_right() //turn rudder right
{
    r_dir = 0;
    r_motor = 1;
    Thread::wait(5);
    r_motor =0;
    Thread::wait(.15);
    r_motor = 1;
    Thread::wait(.5);
    r_motor =0;
    Thread::wait(.15);
    r_motor = 1;
    Thread::wait(.5);
    r_motor = 0;
    Thread::wait(.15);
    r_motor = 1;
    Thread::wait(.5);
    r_motor = 0;
    Thread::wait(.15);
}
void r_left() //turn rudder left
{
    r_dir = 1;
    r_motor = 1;
    Thread::wait(.5);
    r_motor = 0;
    Thread::wait(.15);
    r_motor = 1;
    Thread::wait(.5);
    r_motor = 0;
    Thread::wait(.15);
    r_motor = 1;
    Thread::wait(.5);
    r_motor = 0;
    Thread::wait(.15);
    r_motor = 1;
    Thread::wait(.5);
    r_motor = 0;
    Thread::wait(.15);
}
float r_posi(float ain) //function that averages the position from encoder
{
    float p1;
    float p2;
    float p3;
    p1 = (ain-.108)/.002466;
    p2 = (ain-.108)/.002466;
    p3 = (ain-.108)/.002466;
    return (p1+p2+p3)/3.0;
}

// ******mast stepper functions******
void m_right() //turn mast right
{
    m_dir = 0;
    m_motor = 1;
    Thread::wait(.5);
    m_motor =0;
    Thread::wait(.15);
    m_motor = 1;
    Thread::wait(.5);
    m_motor =0;
    Thread::wait(.15);
    m_motor = 1;
    Thread::wait(.5);
    m_motor = 0;
    Thread::wait(.15);
    m_motor = 1;
    Thread::wait(.5);
    m_motor = 0;
    Thread::wait(.15);
}
void m_left() //turn rudder left
{
    m_dir = 1;
    m_motor = 1;
    Thread::wait(.5);
    m_motor = 0;
    Thread::wait(.15);
    m_motor = 1;
    Thread::wait(.5);
    m_motor = 0;
    Thread::wait(.15);
    m_motor = 1;
    Thread::wait(.5);
    m_motor = 0;
    Thread::wait(.15);
    m_motor = 1;
    Thread::wait(.5);
    m_motor = 0;
    Thread::wait(.15);
}
float m_posi(float ain) //function that averages the position from encoder
{
    float m1;
    float m2;
    float m3;
    m1 = (ain-.108)/.002466;
    m2 = (ain-.108)/.002466;
    m3 = (ain-.108)/.002466;
    return (p1+p2+p3)/3.0;
}
//*********IMU initialization**************
void bno_init(void)
{
    if(bno.check()) {
        //pc.printf("BNO055 connected\r\n");
        bno.reset();
        Thread::wait(50);
        bno.setmode(OPERATION_MODE_CONFIG);
        bno.SetExternalCrystal(1);
        //bno.set_orientation(1);
        bno.setmode(OPERATION_MODE_NDOF);  //Uses magnetometer
        //bno.setmode(OPERATION_MODE_NDOF_FMC_OFF);   //no magnetometer
        bno.set_angle_units(RADIANS);
    } else {
        //pc.printf("BNO055 NOT connected\r\n Program Trap.");
        while(1);
    }
}

//*********read reads yaw from IMU **************
void yaw_read()
{
    bno.get_angles();
    float pitch = bno.euler.yaw;
    myFloat.m_float = pitch;
    data = myFloat.m_float;   // get the float back from the union
    pc.printf("%.4f", pitch);
    Thread::wait(10);

}

//********concatenate time
float conc(float hr, float min, float sec )
{
    return hr+(min/60.0)+(sec/3600.0);
}



void control_thread()
{
    //rc control will occur in the control thread
// this needs work depending on the type of command
//doing example with only rudder until i know how the type of command is specified
    while(1) {

        pc.scanf("%f", &r_ang); //-left from when testing on teraterm
        pos = r_posi(r_ain);
        if( pos > r_ang && pos < 270.0) { //turn rudder to left
            while(pos > r_ang) {
                r_left();
                pc.printf("%.3f\n",pos); //for testing in teraterm
                pos = r_posi(r_ain);
            }
        }
        if(pos < r_ang && pos > 90.0) {  // turn rudder to right
            while(pos < r_ang) {
                r_right();
                pc.printf("%.3f\n",pos); //for testing in teraterm
                pos = r_posi(r_ain);
            }
        }
        if(pos > 270.0) {          // the next two if statments keep the rudder and mast between
            while( pos > 265.0) {  // 90 and 270 since they do not need to go beyond those points ever
                r_left();          // and the transition between 360 to 0 causes undesired behavior with our current program design
                pos = r_posi(r_ain);
            }
        }
        if(pos < 90.0) {
            while( pos < 95.0) {
                r_right();
                pos = r_posi(r_ain);
            }
        }

        Thread::wait(22);
        //ThisThread::sleep_for(22)
    }
}

int main()   // gps, imu functionality and data logging will be implemented in main
{
    pc.baud(115200); //sets virtual COM serial communication to high rate; this is to allow more time to be spent on GPS retrieval
    // thread.start(control_thread()); *commented out to test data logging thread*

    gps_Serial = new Serial(p9,p10); //serial object for use w/ GPS
    Adafruit_GPS myGPS(gps_Serial); //object of Adafruit's GPS class


    myGPS.begin(9600);  //sets baud rate for GPS communication; note this may be changed via Adafruit_GPS::sendCommand(char *)
    //a list of GPS commands is available at http://www.adafruit.com/datasheets/PMTK_A08.pdf

    myGPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); //these commands are defined in MBed_Adafruit_GPS.h; a link is provided there for command creation
    myGPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    myGPS.sendCommand(PGCMD_ANTENNA);


    bno_init(); //initializes IMU

    Thread::wait(100);

    refresh_Timer.start();  //starts the clock on the timer

    while(1) { //start read loop
        //read time

        c = myGPS.read();   //queries the GPS
        bno.get_angles(); //gets angles from IMU
        if (c) { //pc.printf("%c", c); } //this line echos NMEA gps messages
        }
        //check if we recieved a new message from GPS, if so, attempt to parse it,
        if ( myGPS.newNMEAreceived() ) {
            if ( !myGPS.parse(myGPS.lastNMEA()) ) {
                continue;
            }
        }

        //check if enough time has passed to warrant printing GPS info to screen
        //note if refresh_Time is too low or pc.baud is too low, GPS data may be lost during printing
        if (refresh_Timer.read_ms() >= refresh_Time) {
            refresh_Timer.reset();
            /*pc.printf("Time: %d:%d:%d.%u\n", myGPS.hour, myGPS.minute, myGPS.seconds, myGPS.milliseconds);
            pc.printf("Date: %d/%d/20%d\n", myGPS.day, myGPS.month, myGPS.year);
            pc.printf("Fix: %d\n", (int) myGPS.fix);
            pc.printf("Quality: %d\n", (int) myGPS.fixquality);*/

        }



        pitch = conc(myGPS.hour, myGPS.minute, myGPS.seconds); //calls conc function to combine time into one float that can be sent over serial
        myFloat.m_float = pitch;
        data = myFloat.m_float;   // get the float back from the union
        pc.printf("%.4f", pitch);
        Thread::wait(10);
        // read rudder position: (rudder, mast position commented out because we were testing without stepper motors turned on )
        /*pitch = r_posi(r_ain);
        myFloat.m_float = pitch;
        data = myFloat.m_float;   // get the float back from the union
        pc.printf("%.4f", pitch);
        Thread::wait(10);
        // read mast
        pitch = m_posi(m_ain);
        myFloat.m_float = pitch;
        data = myFloat.m_float;   // get the float back from the union
        pc.printf("%.4f", pitch); */
        yaw_read(); //read yaw
        Thread::wait(2000); //wait 2 second so that all of the data only updates every 1 second

    }
}
